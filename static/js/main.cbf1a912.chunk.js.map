{"version":3,"sources":["types/Actions.ts","types/Status.ts","features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","components/Loader/Loader.tsx","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["ActionTypes","Status","currentTodoReducer","state","action","type","payload","initialState","searchedTitle","selectedStatus","all","filterReducer","changeTodosQuery","changeTodosStatus","todosReducer","todosSet","rootReducer","combineReducers","currentTodo","filter","todos","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppDispatch","useDispatch","useAppSelector","useSelector","Loader","className","TodoList","error","dispatch","slashedEyeId","id","visibletodos","useMemo","title","completed","toLocaleLowerCase","includes","active","length","map","userId","onClick","addCurrentTodo","cn","TodoFilter","onSubmit","event","preventDefault","onChange","convertedStatus","target","value","placeholder","style","pointerEvents","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","getUser","TodoModal","useState","user","setUser","setError","onTodoSelect","a","useEffect","href","email","name","App","onPageLoad","result","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.cbf1a912.chunk.js","sourcesContent":["export enum ActionTypes {\n  currentTodoSet = 'currentTodo/SET',\n  currentTodoDelete = 'currentTodo/REMOVE',\n  changeTodosStatus = 'todos/CHANGESTATUS',\n  changeTodosQuery = 'todos/CHANGEQUERY',\n  todosSet = 'todos/SET',\n}\n","export enum Status {\n  all = 'all',\n  active = 'active',\n  completed = 'completed',\n}\n","import { Todo } from '../types/Todo';\n\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/REMOVE':\n      return null;\n    case 'currentTodo/SET':\n      return action.payload;\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import { ActionTypes } from '../types/Actions';\nimport { Status } from '../types/Status';\n\ntype StateType = {\n  searchedTitle: string;\n  selectedStatus: Status;\n};\n\ntype SetTodosQueryAction = {\n  type: ActionTypes.changeTodosQuery;\n  payload: string;\n};\n\ntype SetTodosStatusAction = {\n  type: ActionTypes.changeTodosStatus;\n  payload: Status;\n};\n\ntype ActionsType = SetTodosQueryAction | SetTodosStatusAction;\n\nconst initialState: StateType = {\n  searchedTitle: '',\n  selectedStatus: Status.all,\n};\n\nconst setTodosQuery = (searchedTitle: string) => ({\n  type: ActionTypes.changeTodosQuery,\n  payload: searchedTitle,\n});\n\nconst setTodosStatus = (selectedStatus: Status) => ({\n  type: ActionTypes.changeTodosStatus,\n  payload: selectedStatus,\n});\n\nexport const actions = { setTodosQuery, setTodosStatus };\n\nconst filterReducer = (\n  state: StateType = initialState,\n  action: ActionsType,\n): StateType => {\n  switch (action.type) {\n    case ActionTypes.changeTodosQuery:\n      return {\n        ...state,\n        searchedTitle: action.payload,\n      };\n    case ActionTypes.changeTodosStatus:\n      return {\n        ...state,\n        selectedStatus: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\nimport { ActionTypes } from '../types/Actions';\n\nexport type SetTodosAction = {\n  type: ActionTypes.todosSet;\n  payload: Todo[];\n};\n\nexport const setTodos = (todos: Todo[]) => ({\n  type: ActionTypes.todosSet,\n  payload: todos,\n});\n\ntype State = Todo[];\n\nconst todosReducer = (\n  state: State = [],\n  action: SetTodosAction,\n): Todo[] => {\n  if (action.type === ActionTypes.todosSet) {\n    return action.payload;\n  }\n\n  return state;\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useMemo } from 'react';\nimport cn from 'classnames';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { Status } from '../../types/Status';\nimport { Loader } from '../Loader';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  error: string,\n};\n\nexport const TodoList: React.FC<Props> = ({\n  error,\n}) => {\n  const todos = useAppSelector(state => state.todos);\n  const { searchedTitle, selectedStatus }\n    = useAppSelector(state => state.filter);\n  const dispatch = useAppDispatch();\n  const slashedEyeId = useAppSelector(state => state.currentTodo)?.id;\n\n  const visibletodos = useMemo(() => {\n    return todos.filter(({ title, completed }) => {\n      if (searchedTitle !== '' && (\n        !title.toLocaleLowerCase()\n          .includes(searchedTitle.toLocaleLowerCase())\n      )) {\n        return false;\n      }\n\n      switch (selectedStatus) {\n        case Status.active:\n          return !completed;\n        case Status.completed:\n          return completed;\n        default:\n          return true;\n      }\n    });\n  }, [todos, searchedTitle, selectedStatus]);\n\n  const addCurrentTodo = ({\n    id,\n    completed,\n    title,\n    userId,\n  }: Todo) => (\n    dispatch({\n      type: 'currentTodo/SET',\n      payload: {\n        id,\n        completed,\n        title,\n        userId,\n      },\n    })\n  );\n\n  return (\n    <>\n      {error && (\n        <p className=\"notification is-warning\">\n          {error}\n        </p>\n      )}\n\n      {!todos.length\n        ? <Loader />\n        : (\n          <table className=\"table is-narrow is-fullwidth\">\n            <thead>\n              <tr>\n                <th>#</th>\n\n                <th>\n                  <span className=\"icon\">\n                    <i className=\"fas fa-check\" />\n                  </span>\n                </th>\n\n                <th>Title</th>\n                <th> </th>\n              </tr>\n            </thead>\n            <tbody>\n              {visibletodos.map(({\n                id,\n                completed,\n                title,\n                userId,\n              }) => (\n                <tr key={id} data-cy=\"todo\">\n                  <td className=\"is-vcentered\">{id}</td>\n                  <td className=\"is-vcentered\">\n                    {completed && (\n                      <span className=\"icon\" data-cy=\"iconCompleted\">\n                        <i className=\"fas fa-check\" />\n                      </span>\n                    )}\n                  </td>\n\n                  <td className=\"is-vcentered is-expanded\">\n                    <p\n                      className={\n                        completed\n                          ? 'has-text-success'\n                          : 'has-text-danger'\n                      }\n                    >\n                      {title}\n                    </p>\n                  </td>\n\n                  <td className=\"has-text-right is-vcentered\">\n                    <button\n                      data-cy=\"selectButton\"\n                      className=\"button\"\n                      type=\"button\"\n                      onClick={() => addCurrentTodo({\n                        id,\n                        completed,\n                        title,\n                        userId,\n                      })}\n                    >\n                      <span className=\"icon\">\n                        <i className={cn(\n                          'far',\n                          { 'fa-eye-slash': id === slashedEyeId },\n                          { 'fa-eye': id !== slashedEyeId },\n                        )}\n                        />\n                      </span>\n                    </button>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        )}\n    </>\n  );\n};\n","import React, { ChangeEvent } from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { ActionTypes } from '../../types/Actions';\nimport { Status } from '../../types/Status';\n\nexport const TodoFilter: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const { selectedStatus, searchedTitle }\n    = useAppSelector(state => state.filter);\n\n  const handleStatusChange = (event: ChangeEvent<HTMLSelectElement>) => {\n    let convertedStatus;\n\n    switch (event.target.value) {\n      case 'active':\n        convertedStatus = Status.active;\n        break;\n      case 'completed':\n        convertedStatus = Status.completed;\n        break;\n      default:\n        convertedStatus = Status.all;\n        break;\n    }\n\n    dispatch({\n      type: ActionTypes.changeTodosStatus,\n      payload: convertedStatus,\n    });\n  };\n\n  const handleChangeTitle = (event: ChangeEvent<HTMLInputElement>) => (\n    dispatch({\n      type: ActionTypes.changeTodosQuery,\n      payload: event.target.value,\n    })\n  );\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={event => event.preventDefault()}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            onChange={handleStatusChange}\n            value={selectedStatus}\n          >\n            <option value={Status.all}>All</option>\n            <option value={Status.active}>Active</option>\n            <option value={Status.completed}>Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={searchedTitle}\n          onChange={handleChangeTitle}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {searchedTitle && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={() => dispatch({\n                type: ActionTypes.changeTodosQuery,\n                payload: '',\n              })}\n              aria-label=\"button\"\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\nconst BASE_URL\n= 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  const fullURL = `${BASE_URL}${url}.json`;\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from '../Loader';\nimport { Todo } from '../../types/Todo';\nimport { getUser } from '../../api';\nimport { User } from '../../types/User';\nimport { useAppDispatch } from '../../app/hooks';\n\ntype Props = {\n  currentTodo: Todo;\n};\n\nexport const TodoModal: React.FC<Props> = ({ currentTodo }) => {\n  const [user, setUser] = useState<User | null>(null);\n  const dispatch = useAppDispatch();\n  const [error, setError] = useState('');\n\n  const {\n    id,\n    title,\n    completed,\n    userId,\n  } = currentTodo;\n\n  const onTodoSelect = async () => {\n    try {\n      const res = await getUser(userId);\n\n      setUser(res);\n      setError('');\n    } catch {\n      setError('unable to get user');\n    }\n  };\n\n  useEffect(() => {\n    onTodoSelect();\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!user && !error && (<Loader />)}\n\n      {error && (\n        <p className=\"notification is-warning\">\n          {error}\n        </p>\n      )}\n\n      {user && (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              Todo #\n              {id}\n            </div>\n\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={() => dispatch({ type: 'currentTodo/REMOVE' })}\n              aria-label=\"button\"\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">{title}</p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {\n                completed ? (\n                  <strong className=\"has-text-success\">Done</strong>\n\n                ) : (\n                  <strong className=\"has-text-danger\">Planned</strong>\n                )\n              }\n              {' by '}\n              {user && (\n                <a href={`mailto:${user.email}`}>{user.name}</a>\n              )}\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { getTodos } from './api';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\nimport { TodoModal } from './components/TodoModal';\nimport { ActionTypes } from './types/Actions';\n\nexport const App: React.FC = () => {\n  const [error, setError] = useState('');\n  const dispatch = useAppDispatch();\n  const currentTodo = useAppSelector(state => state.currentTodo);\n\n  const onPageLoad = async () => {\n    try {\n      const result = await getTodos();\n\n      dispatch({ payload: result, type: ActionTypes.todosSet });\n      setError('');\n    } catch {\n      setError('unable to get todos');\n    }\n  };\n\n  useEffect(() => {\n    onPageLoad();\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              <TodoList error={error} />\n            </div>\n          </div>\n        </div>\n      </div>\n      {currentTodo && <TodoModal currentTodo={currentTodo} />}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}